/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * New Year Game API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import { baseApiRequest } from '../../../baseApiRequest'
import type {
  AttemptRequest,
  FeedbackRequest,
  GameState,
  RegisterRequest,
} from '.././model'

/**
 * @summary Get current game state
 */
export const getApiClientGetState = (signal?: AbortSignal) => {
  return baseApiRequest<GameState>({
    url: `/api/client/getState`,
    method: 'GET',
    signal,
  })
}

export const getGetApiClientGetStateQueryKey = () => {
  return [`/api/client/getState`] as const
}

export const getGetApiClientGetStateQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiClientGetState>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiClientGetState>>,
      TError,
      TData
    >
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetApiClientGetStateQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiClientGetState>>
  > = ({ signal }) => getApiClientGetState(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiClientGetState>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApiClientGetStateQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiClientGetState>>
>
export type GetApiClientGetStateQueryError = unknown

export function useGetApiClientGetState<
  TData = Awaited<ReturnType<typeof getApiClientGetState>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiClientGetState>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiClientGetState>>,
        TError,
        TData
      >,
      'initialData'
    >
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>
}
export function useGetApiClientGetState<
  TData = Awaited<ReturnType<typeof getApiClientGetState>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiClientGetState>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiClientGetState>>,
        TError,
        TData
      >,
      'initialData'
    >
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApiClientGetState<
  TData = Awaited<ReturnType<typeof getApiClientGetState>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiClientGetState>>,
      TError,
      TData
    >
  >
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get current game state
 */

export function useGetApiClientGetState<
  TData = Awaited<ReturnType<typeof getApiClientGetState>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiClientGetState>>,
      TError,
      TData
    >
  >
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiClientGetStateQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Submit new word attempt
 */
export const postApiClientNewAttempt = (
  attemptRequest: AttemptRequest,
  signal?: AbortSignal,
) => {
  return baseApiRequest<void>({
    url: `/api/client/new_attempt`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: attemptRequest,
    signal,
  })
}

export const getPostApiClientNewAttemptMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiClientNewAttempt>>,
    TError,
    { data: AttemptRequest },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiClientNewAttempt>>,
  TError,
  { data: AttemptRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiClientNewAttempt>>,
    { data: AttemptRequest }
  > = props => {
    const { data } = props ?? {}

    return postApiClientNewAttempt(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostApiClientNewAttemptMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiClientNewAttempt>>
>
export type PostApiClientNewAttemptMutationBody = AttemptRequest
export type PostApiClientNewAttemptMutationError = unknown

/**
 * @summary Submit new word attempt
 */
export const usePostApiClientNewAttempt = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiClientNewAttempt>>,
    TError,
    { data: AttemptRequest },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiClientNewAttempt>>,
  TError,
  { data: AttemptRequest },
  TContext
> => {
  const mutationOptions = getPostApiClientNewAttemptMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Register new user
 */
export const postApiClientRegister = (
  registerRequest: RegisterRequest,
  signal?: AbortSignal,
) => {
  return baseApiRequest<void>({
    url: `/api/client/register`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: registerRequest,
    signal,
  })
}

export const getPostApiClientRegisterMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiClientRegister>>,
    TError,
    { data: RegisterRequest },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiClientRegister>>,
  TError,
  { data: RegisterRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiClientRegister>>,
    { data: RegisterRequest }
  > = props => {
    const { data } = props ?? {}

    return postApiClientRegister(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostApiClientRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiClientRegister>>
>
export type PostApiClientRegisterMutationBody = RegisterRequest
export type PostApiClientRegisterMutationError = unknown

/**
 * @summary Register new user
 */
export const usePostApiClientRegister = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiClientRegister>>,
    TError,
    { data: RegisterRequest },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiClientRegister>>,
  TError,
  { data: RegisterRequest },
  TContext
> => {
  const mutationOptions = getPostApiClientRegisterMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * @summary Send feedback
 */
export const postApiClientSendFeedback = (
  feedbackRequest: FeedbackRequest,
  signal?: AbortSignal,
) => {
  return baseApiRequest<void>({
    url: `/api/client/sendFeedback`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: feedbackRequest,
    signal,
  })
}

export const getPostApiClientSendFeedbackMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiClientSendFeedback>>,
    TError,
    { data: FeedbackRequest },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiClientSendFeedback>>,
  TError,
  { data: FeedbackRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiClientSendFeedback>>,
    { data: FeedbackRequest }
  > = props => {
    const { data } = props ?? {}

    return postApiClientSendFeedback(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostApiClientSendFeedbackMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiClientSendFeedback>>
>
export type PostApiClientSendFeedbackMutationBody = FeedbackRequest
export type PostApiClientSendFeedbackMutationError = unknown

/**
 * @summary Send feedback
 */
export const usePostApiClientSendFeedback = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiClientSendFeedback>>,
    TError,
    { data: FeedbackRequest },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiClientSendFeedback>>,
  TError,
  { data: FeedbackRequest },
  TContext
> => {
  const mutationOptions = getPostApiClientSendFeedbackMutationOptions(options)

  return useMutation(mutationOptions)
}
